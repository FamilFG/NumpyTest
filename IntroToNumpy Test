{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.11.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"colab":{"name":"assignment_set_1.ipynb","provenance":[],"collapsed_sections":[]},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":3966491,"sourceType":"datasetVersion","datasetId":2354152},{"sourceId":12981657,"sourceType":"datasetVersion","datasetId":8216705}],"dockerImageVersionId":31089,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":5,"nbformat":4,"cells":[{"id":"7a1b28e7-a862-4b1f-8cc0-f82b13a6628a","cell_type":"markdown","source":"# **PRACTICE OF NUMPY**","metadata":{}},{"id":"fbd63de5-b658-4245-b32c-0a85cedc8ef5","cell_type":"code","source":"import numpy as np\n\nL = np.random.randint(1,10,(3,3))\nprint(L)\nprint(sum(np.diag(L)))\nprint(L.shape)\nprint(sum(L))\n","metadata":{"_uuid":"be3541f0-5073-4edb-82d1-290d4bc78483","_cell_guid":"bb6a14d7-1689-473d-a10b-34ccdb553418","trusted":true,"collapsed":false,"jupyter":{"outputs_hidden":false},"execution":{"iopub.status.busy":"2025-09-09T21:18:27.023268Z","iopub.execute_input":"2025-09-09T21:18:27.023599Z","iopub.status.idle":"2025-09-09T21:18:27.040902Z","shell.execute_reply.started":"2025-09-09T21:18:27.023568Z","shell.execute_reply":"2025-09-09T21:18:27.039751Z"}},"outputs":[{"name":"stdout","text":"[[4 3 2]\n [1 7 2]\n [8 7 3]]\n14\n(3, 3)\n[13 17  7]\n","output_type":"stream"}],"execution_count":1},{"id":"f4a8db34-3d72-402e-bc9b-7a93b3972209","cell_type":"code","source":"from sys import getsizeof\narr = np.array([[1,2,3],\n               [4,5,6],\n               [7,8,9]])\nprint(arr.shape)\nprint(arr.ndim)\nprint(arr.size)\nprint(arr.dtype)\nprint(arr.nbytes)\nprint(getsizeof(arr))\nprint(id(arr))","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T20:38:49.176214Z","iopub.execute_input":"2025-09-06T20:38:49.176476Z","iopub.status.idle":"2025-09-06T20:38:49.182590Z","shell.execute_reply.started":"2025-09-06T20:38:49.176457Z","shell.execute_reply":"2025-09-06T20:38:49.181255Z"}},"outputs":[],"execution_count":null},{"id":"cbfd1355-5216-4046-a50c-db619d797cc4","cell_type":"code","source":"arr = np.array([1,20,300,4000,50000])\narr.astype('int32')","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T21:03:54.634231Z","iopub.execute_input":"2025-09-06T21:03:54.635027Z","iopub.status.idle":"2025-09-06T21:03:54.640733Z","shell.execute_reply.started":"2025-09-06T21:03:54.634997Z","shell.execute_reply":"2025-09-06T21:03:54.639932Z"}},"outputs":[],"execution_count":null},{"id":"60a624c8-db22-43d3-9fe6-9cb06d4114b6","cell_type":"code","source":"T1 = [(1, 10, 10), (2, 20), (3, 30)]\nT2 = [(1, 10), (2, 20), (3, 30)]\na = np.array(T1,dtype='object')\nprint(a)\nprint(a.shape)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T21:07:14.661929Z","iopub.execute_input":"2025-09-06T21:07:14.662206Z","iopub.status.idle":"2025-09-06T21:07:14.668122Z","shell.execute_reply.started":"2025-09-06T21:07:14.662187Z","shell.execute_reply":"2025-09-06T21:07:14.667148Z"}},"outputs":[],"execution_count":null},{"id":"1367aefb-9e03-450c-a3f3-d42db5a5f1f6","cell_type":"markdown","source":"# **WORKING WITH DATA IN NUMPY**","metadata":{}},{"id":"b5bb9cc8-10d9-484b-8d7c-42052d8e6da6","cell_type":"code","source":"data = np.loadtxt('/kaggle/input/d/familgulmammadov/npdatasets/data.txt', delimiter=\"\\t\")\nprint(data[0, :])\ntype(data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-06T21:37:51.534354Z","iopub.execute_input":"2025-09-06T21:37:51.534709Z","iopub.status.idle":"2025-09-06T21:37:51.542574Z","shell.execute_reply.started":"2025-09-06T21:37:51.534682Z","shell.execute_reply":"2025-09-06T21:37:51.541896Z"}},"outputs":[{"name":"stdout","text":"[ 1.      87.      57.54435]\n","output_type":"stream"},{"execution_count":98,"output_type":"execute_result","data":{"text/plain":"numpy.ndarray"},"metadata":{}}],"execution_count":98},{"id":"a8f59b07-a8e8-4b31-8d63-da4bfcc9302f","cell_type":"code","source":"\ndttype = np.dtype({\"names\": [\"CustomerID\", \"Genre\", \"Age\", \"Annual_Income\", \"Spending_Score\"],\n                   \"formats\": [np.int64, 'U8', np.int64, np.int64, np.int64]})\n\ndata = np.genfromtxt('/kaggle/input/d/familgulmammadov/npdatasets/Mall_Customers.csv', \n                     delimiter=\",\",\n                    dtype = dttype,\n                    skip_header = 1)\nprint(data[:15])\ndata.shape\ndata[0]['Age']\nnp.save('/kaggle/working/output.npy', data)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-07T10:57:27.356995Z","iopub.execute_input":"2025-09-07T10:57:27.357304Z","iopub.status.idle":"2025-09-07T10:57:27.371095Z","shell.execute_reply.started":"2025-09-07T10:57:27.357282Z","shell.execute_reply":"2025-09-07T10:57:27.369006Z"}},"outputs":[{"name":"stdout","text":"[( 1, 'Male', 19, 15, 39) ( 2, 'Male', 21, 15, 81)\n ( 3, 'Female', 20, 16,  6) ( 4, 'Female', 23, 16, 77)\n ( 5, 'Female', 31, 17, 40) ( 6, 'Female', 22, 17, 76)\n ( 7, 'Female', 35, 18,  6) ( 8, 'Female', 23, 18, 94)\n ( 9, 'Male', 64, 19,  3) (10, 'Female', 30, 19, 72)\n (11, 'Male', 67, 19, 14) (12, 'Female', 35, 19, 99)\n (13, 'Female', 58, 20, 15) (14, 'Female', 24, 20, 77)\n (15, 'Male', 37, 20, 13)]\n","output_type":"stream"}],"execution_count":12},{"id":"8a4a796a-2276-42df-aa66-6966f76dfbbe","cell_type":"markdown","source":"# **WORKING WITH ASSIGNMENT**\n\n\n","metadata":{}},{"id":"84607b46-b336-405c-88de-09bfe08deca0","cell_type":"markdown","source":"# Assignment Set 1 - Module Creating Arrays","metadata":{}},{"id":"72cdb6e1-b0f6-4a2e-a693-f7000bd72f8c","cell_type":"markdown","source":"### Q1.  Create a 2x2x2 3-D array containing total 8 elements.","metadata":{}},{"id":"756c8949-b855-4b4b-990c-93dfa7850324","cell_type":"code","source":"array = np.arange(8).reshape(2,2,2)\narray","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-07T11:08:23.355802Z","iopub.execute_input":"2025-09-07T11:08:23.356124Z","iopub.status.idle":"2025-09-07T11:08:23.363069Z","shell.execute_reply.started":"2025-09-07T11:08:23.356101Z","shell.execute_reply":"2025-09-07T11:08:23.362125Z"}},"outputs":[{"execution_count":19,"output_type":"execute_result","data":{"text/plain":"array([[[0, 1],\n        [2, 3]],\n\n       [[4, 5],\n        [6, 7]]])"},"metadata":{}}],"execution_count":19},{"id":"5cd62d23-0f9e-4fdd-9acc-67a50a087fd2","cell_type":"markdown","source":"### Q2.  Replace the 1st element of the above 3-D array with 10","metadata":{}},{"id":"d04d7127-57ac-4895-a1b7-7e3eab3f0e99","cell_type":"code","source":"array[0,0,0] = 10\narray","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-07T11:08:25.099662Z","iopub.execute_input":"2025-09-07T11:08:25.100014Z","iopub.status.idle":"2025-09-07T11:08:25.106779Z","shell.execute_reply.started":"2025-09-07T11:08:25.099990Z","shell.execute_reply":"2025-09-07T11:08:25.105810Z"}},"outputs":[{"execution_count":20,"output_type":"execute_result","data":{"text/plain":"array([[[10,  1],\n        [ 2,  3]],\n\n       [[ 4,  5],\n        [ 6,  7]]])"},"metadata":{}}],"execution_count":20},{"id":"84d3645b-8751-4b58-8a11-28f0663f087f","cell_type":"markdown","source":"### 3.  Check the shape and dimensions of the above 3-D array","metadata":{}},{"id":"e57bb9ee-d983-4029-88d3-4bc181936757","cell_type":"code","source":"print(array.shape)\nprint(array.ndim)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-07T11:17:07.012681Z","iopub.execute_input":"2025-09-07T11:17:07.013116Z","iopub.status.idle":"2025-09-07T11:17:07.019715Z","shell.execute_reply.started":"2025-09-07T11:17:07.013094Z","shell.execute_reply":"2025-09-07T11:17:07.018359Z"}},"outputs":[{"name":"stdout","text":"(2, 2, 2)\n3\n","output_type":"stream"}],"execution_count":30},{"id":"6c9fe747-8b3d-4361-bc4c-d4f500e34554","cell_type":"markdown","source":"### 4. Export the above array","metadata":{}},{"id":"bcf49632-6e1c-4af2-8ecb-cf8ede95d037","cell_type":"code","source":"np.save('/kaggle/working/my_array.npy', array)\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-07T11:10:37.023787Z","iopub.execute_input":"2025-09-07T11:10:37.024093Z","iopub.status.idle":"2025-09-07T11:10:37.030057Z","shell.execute_reply.started":"2025-09-07T11:10:37.024071Z","shell.execute_reply":"2025-09-07T11:10:37.028982Z"}},"outputs":[],"execution_count":24},{"id":"41b7b66e-0936-4760-a73d-304a34988665","cell_type":"markdown","source":"### 5. Import the array from given url","metadata":{}},{"id":"89a45c53-81e0-46d0-a66e-4ac4cd0c63ee","cell_type":"code","source":"\ndataset = np.genfromtxt('/kaggle/input/iris-dataset/iris.csv', delimiter=\",\", dtype='str')\ndataset","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-07T11:15:43.126063Z","iopub.execute_input":"2025-09-07T11:15:43.126367Z","iopub.status.idle":"2025-09-07T11:15:43.140298Z","shell.execute_reply.started":"2025-09-07T11:15:43.126346Z","shell.execute_reply":"2025-09-07T11:15:43.138108Z"}},"outputs":[{"execution_count":28,"output_type":"execute_result","data":{"text/plain":"array([['sepal_length', 'sepal_width', 'petal_length', 'petal_width',\n        'species'],\n       ['5.1', '3.5', '1.4', '0.2', 'setosa'],\n       ['4.9', '3.0', '1.4', '0.2', 'setosa'],\n       ['4.7', '3.2', '1.3', '0.2', 'setosa'],\n       ['4.6', '3.1', '1.5', '0.2', 'setosa'],\n       ['5.0', '3.6', '1.4', '0.2', 'setosa'],\n       ['5.4', '3.9', '1.7', '0.4', 'setosa'],\n       ['4.6', '3.4', '1.4', '0.3', 'setosa'],\n       ['5.0', '3.4', '1.5', '0.2', 'setosa'],\n       ['4.4', '2.9', '1.4', '0.2', 'setosa'],\n       ['4.9', '3.1', '1.5', '0.1', 'setosa'],\n       ['5.4', '3.7', '1.5', '0.2', 'setosa'],\n       ['4.8', '3.4', '1.6', '0.2', 'setosa'],\n       ['4.8', '3.0', '1.4', '0.1', 'setosa'],\n       ['4.3', '3.0', '1.1', '0.1', 'setosa'],\n       ['5.8', '4.0', '1.2', '0.2', 'setosa'],\n       ['5.7', '4.4', '1.5', '0.4', 'setosa'],\n       ['5.4', '3.9', '1.3', '0.4', 'setosa'],\n       ['5.1', '3.5', '1.4', '0.3', 'setosa'],\n       ['5.7', '3.8', '1.7', '0.3', 'setosa'],\n       ['5.1', '3.8', '1.5', '0.3', 'setosa'],\n       ['5.4', '3.4', '1.7', '0.2', 'setosa'],\n       ['5.1', '3.7', '1.5', '0.4', 'setosa'],\n       ['4.6', '3.6', '1.0', '0.2', 'setosa'],\n       ['5.1', '3.3', '1.7', '0.5', 'setosa'],\n       ['4.8', '3.4', '1.9', '0.2', 'setosa'],\n       ['5.0', '3.0', '1.6', '0.2', 'setosa'],\n       ['5.0', '3.4', '1.6', '0.4', 'setosa'],\n       ['5.2', '3.5', '1.5', '0.2', 'setosa'],\n       ['5.2', '3.4', '1.4', '0.2', 'setosa'],\n       ['4.7', '3.2', '1.6', '0.2', 'setosa'],\n       ['4.8', '3.1', '1.6', '0.2', 'setosa'],\n       ['5.4', '3.4', '1.5', '0.4', 'setosa'],\n       ['5.2', '4.1', '1.5', '0.1', 'setosa'],\n       ['5.5', '4.2', '1.4', '0.2', 'setosa'],\n       ['4.9', '3.1', '1.5', '0.1', 'setosa'],\n       ['5.0', '3.2', '1.2', '0.2', 'setosa'],\n       ['5.5', '3.5', '1.3', '0.2', 'setosa'],\n       ['4.9', '3.1', '1.5', '0.1', 'setosa'],\n       ['4.4', '3.0', '1.3', '0.2', 'setosa'],\n       ['5.1', '3.4', '1.5', '0.2', 'setosa'],\n       ['5.0', '3.5', '1.3', '0.3', 'setosa'],\n       ['4.5', '2.3', '1.3', '0.3', 'setosa'],\n       ['4.4', '3.2', '1.3', '0.2', 'setosa'],\n       ['5.0', '3.5', '1.6', '0.6', 'setosa'],\n       ['5.1', '3.8', '1.9', '0.4', 'setosa'],\n       ['4.8', '3.0', '1.4', '0.3', 'setosa'],\n       ['5.1', '3.8', '1.6', '0.2', 'setosa'],\n       ['4.6', '3.2', '1.4', '0.2', 'setosa'],\n       ['5.3', '3.7', '1.5', '0.2', 'setosa'],\n       ['5.0', '3.3', '1.4', '0.2', 'setosa'],\n       ['7.0', '3.2', '4.7', '1.4', 'versicolor'],\n       ['6.4', '3.2', '4.5', '1.5', 'versicolor'],\n       ['6.9', '3.1', '4.9', '1.5', 'versicolor'],\n       ['5.5', '2.3', '4.0', '1.3', 'versicolor'],\n       ['6.5', '2.8', '4.6', '1.5', 'versicolor'],\n       ['5.7', '2.8', '4.5', '1.3', 'versicolor'],\n       ['6.3', '3.3', '4.7', '1.6', 'versicolor'],\n       ['4.9', '2.4', '3.3', '1.0', 'versicolor'],\n       ['6.6', '2.9', '4.6', '1.3', 'versicolor'],\n       ['5.2', '2.7', '3.9', '1.4', 'versicolor'],\n       ['5.0', '2.0', '3.5', '1.0', 'versicolor'],\n       ['5.9', '3.0', '4.2', '1.5', 'versicolor'],\n       ['6.0', '2.2', '4.0', '1.0', 'versicolor'],\n       ['6.1', '2.9', '4.7', '1.4', 'versicolor'],\n       ['5.6', '2.9', '3.6', '1.3', 'versicolor'],\n       ['6.7', '3.1', '4.4', '1.4', 'versicolor'],\n       ['5.6', '3.0', '4.5', '1.5', 'versicolor'],\n       ['5.8', '2.7', '4.1', '1.0', 'versicolor'],\n       ['6.2', '2.2', '4.5', '1.5', 'versicolor'],\n       ['5.6', '2.5', '3.9', '1.1', 'versicolor'],\n       ['5.9', '3.2', '4.8', '1.8', 'versicolor'],\n       ['6.1', '2.8', '4.0', '1.3', 'versicolor'],\n       ['6.3', '2.5', '4.9', '1.5', 'versicolor'],\n       ['6.1', '2.8', '4.7', '1.2', 'versicolor'],\n       ['6.4', '2.9', '4.3', '1.3', 'versicolor'],\n       ['6.6', '3.0', '4.4', '1.4', 'versicolor'],\n       ['6.8', '2.8', '4.8', '1.4', 'versicolor'],\n       ['6.7', '3.0', '5.0', '1.7', 'versicolor'],\n       ['6.0', '2.9', '4.5', '1.5', 'versicolor'],\n       ['5.7', '2.6', '3.5', '1.0', 'versicolor'],\n       ['5.5', '2.4', '3.8', '1.1', 'versicolor'],\n       ['5.5', '2.4', '3.7', '1.0', 'versicolor'],\n       ['5.8', '2.7', '3.9', '1.2', 'versicolor'],\n       ['6.0', '2.7', '5.1', '1.6', 'versicolor'],\n       ['5.4', '3.0', '4.5', '1.5', 'versicolor'],\n       ['6.0', '3.4', '4.5', '1.6', 'versicolor'],\n       ['6.7', '3.1', '4.7', '1.5', 'versicolor'],\n       ['6.3', '2.3', '4.4', '1.3', 'versicolor'],\n       ['5.6', '3.0', '4.1', '1.3', 'versicolor'],\n       ['5.5', '2.5', '4.0', '1.3', 'versicolor'],\n       ['5.5', '2.6', '4.4', '1.2', 'versicolor'],\n       ['6.1', '3.0', '4.6', '1.4', 'versicolor'],\n       ['5.8', '2.6', '4.0', '1.2', 'versicolor'],\n       ['5.0', '2.3', '3.3', '1.0', 'versicolor'],\n       ['5.6', '2.7', '4.2', '1.3', 'versicolor'],\n       ['5.7', '3.0', '4.2', '1.2', 'versicolor'],\n       ['5.7', '2.9', '4.2', '1.3', 'versicolor'],\n       ['6.2', '2.9', '4.3', '1.3', 'versicolor'],\n       ['5.1', '2.5', '3.0', '1.1', 'versicolor'],\n       ['5.7', '2.8', '4.1', '1.3', 'versicolor'],\n       ['6.3', '3.3', '6.0', '2.5', 'virginica'],\n       ['5.8', '2.7', '5.1', '1.9', 'virginica'],\n       ['7.1', '3.0', '5.9', '2.1', 'virginica'],\n       ['6.3', '2.9', '5.6', '1.8', 'virginica'],\n       ['6.5', '3.0', '5.8', '2.2', 'virginica'],\n       ['7.6', '3.0', '6.6', '2.1', 'virginica'],\n       ['4.9', '2.5', '4.5', '1.7', 'virginica'],\n       ['7.3', '2.9', '6.3', '1.8', 'virginica'],\n       ['6.7', '2.5', '5.8', '1.8', 'virginica'],\n       ['7.2', '3.6', '6.1', '2.5', 'virginica'],\n       ['6.5', '3.2', '5.1', '2.0', 'virginica'],\n       ['6.4', '2.7', '5.3', '1.9', 'virginica'],\n       ['6.8', '3.0', '5.5', '2.1', 'virginica'],\n       ['5.7', '2.5', '5.0', '2.0', 'virginica'],\n       ['5.8', '2.8', '5.1', '2.4', 'virginica'],\n       ['6.4', '3.2', '5.3', '2.3', 'virginica'],\n       ['6.5', '3.0', '5.5', '1.8', 'virginica'],\n       ['7.7', '3.8', '6.7', '2.2', 'virginica'],\n       ['7.7', '2.6', '6.9', '2.3', 'virginica'],\n       ['6.0', '2.2', '5.0', '1.5', 'virginica'],\n       ['6.9', '3.2', '5.7', '2.3', 'virginica'],\n       ['5.6', '2.8', '4.9', '2.0', 'virginica'],\n       ['7.7', '2.8', '6.7', '2.0', 'virginica'],\n       ['6.3', '2.7', '4.9', '1.8', 'virginica'],\n       ['6.7', '3.3', '5.7', '2.1', 'virginica'],\n       ['7.2', '3.2', '6.0', '1.8', 'virginica'],\n       ['6.2', '2.8', '4.8', '1.8', 'virginica'],\n       ['6.1', '3.0', '4.9', '1.8', 'virginica'],\n       ['6.4', '2.8', '5.6', '2.1', 'virginica'],\n       ['7.2', '3.0', '5.8', '1.6', 'virginica'],\n       ['7.4', '2.8', '6.1', '1.9', 'virginica'],\n       ['7.9', '3.8', '6.4', '2.0', 'virginica'],\n       ['6.4', '2.8', '5.6', '2.2', 'virginica'],\n       ['6.3', '2.8', '5.1', '1.5', 'virginica'],\n       ['6.1', '2.6', '5.6', '1.4', 'virginica'],\n       ['7.7', '3.0', '6.1', '2.3', 'virginica'],\n       ['6.3', '3.4', '5.6', '2.4', 'virginica'],\n       ['6.4', '3.1', '5.5', '1.8', 'virginica'],\n       ['6.0', '3.0', '4.8', '1.8', 'virginica'],\n       ['6.9', '3.1', '5.4', '2.1', 'virginica'],\n       ['6.7', '3.1', '5.6', '2.4', 'virginica'],\n       ['6.9', '3.1', '5.1', '2.3', 'virginica'],\n       ['5.8', '2.7', '5.1', '1.9', 'virginica'],\n       ['6.8', '3.2', '5.9', '2.3', 'virginica'],\n       ['6.7', '3.3', '5.7', '2.5', 'virginica'],\n       ['6.7', '3.0', '5.2', '2.3', 'virginica'],\n       ['6.3', '2.5', '5.0', '1.9', 'virginica'],\n       ['6.5', '3.0', '5.2', '2.0', 'virginica'],\n       ['6.2', '3.4', '5.4', '2.3', 'virginica'],\n       ['5.9', '3.0', '5.1', '1.8', 'virginica']], dtype='<U12')"},"metadata":{}}],"execution_count":28},{"id":"049b7fd8-9eb9-447c-b778-0ccb83681684","cell_type":"markdown","source":"# **Working with array**","metadata":{}},{"id":"f50f1236-b3ec-4704-bc55-6128dcb2c060","cell_type":"code","source":"\n\ndata = np.genfromtxt('/kaggle/input/d/familgulmammadov/npdatasets/Mall_Customers_Int.csv', \n                     delimiter=\",\",\n                    skip_header = 1)\nmask = data[:,1] == 1\ndata[mask, :]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"id":"5034d9e5-dd55-4eea-85a3-512188ff9fc0","cell_type":"code","source":"\n\ndata = np.genfromtxt('/kaggle/input/d/familgulmammadov/npdatasets/Mall_Customers_Int.csv', \n                     delimiter=\",\",\n                    skip_header = 1)\n\ndata = data[~np.isnan(data).any(axis = 1), :]\nprint(data)\ndata[:,4] = np.where( data[:, 2]%2 ==0 , data[:, 3]-1 , data[:, 4]-2 )\ndata[:,3] = np.where( data[:, 2]%2 ==0 , data[:, 3]-1 , data[:, 4]-2 )\nprint(\"----------------\")\nprint(data)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"id":"a4d07b39-dd5a-4590-8cc5-cdeabf5a953e","cell_type":"markdown","source":"# **Mini Challange**","metadata":{}},{"id":"ad8c30c7-6252-4b19-9d5b-229aae57f206","cell_type":"code","source":"1. From Mall_Customers_Int.csv, find the row positions where 2nd column is 1 and 3rd column has value < 21. Extract the values from these columns. How many such rows exist?\n2. Create a new array from Mall_Customers_Int.csv that has the value 1 if 2nd column = 1 and 3rd column < 21. Otherwise, it has the value 0.","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"id":"e85c1849-8ff5-43f1-af23-44c0d772474e","cell_type":"code","source":"#1st task\n#1. From Mall_Customers_Int.csv, find the row positions where 2nd column is 1 and 3rd column has value < 21. Extract the values from these columns. How many such rows exist?\ntestdata = np.genfromtxt('/kaggle/input/d/familgulmammadov/npdatasets/Mall_Customers_Int.csv',\n                    delimiter = ',',\n                    skip_header = 1)\n#Took the data from db, delete all roes with nan values in it, extract the rows with specific values\ntestdata = data[~np.isnan(data).any(axis=1), :]\npos = np.where((testdata[:, 1] == 1) & (testdata[:, 2] < 21))\nprint(testdata[pos])\n","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T22:00:35.411848Z","iopub.execute_input":"2025-09-09T22:00:35.412148Z","iopub.status.idle":"2025-09-09T22:00:35.423431Z","shell.execute_reply.started":"2025-09-09T22:00:35.412125Z","shell.execute_reply":"2025-09-09T22:00:35.422423Z"},"scrolled":true},"outputs":[{"name":"stdout","text":"[[  1.   1.  19.  15.  39.]\n [ 18.   1.  20.  21.  66.]\n [ 34.   1.  18.  33.  92.]\n [ 62.   1.  19.  46.  55.]\n [ 66.   1.  18.  48.  59.]\n [ 69.   1.  19.  48.  59.]\n [ 92.   1.  18.  59.  41.]\n [100.   1.  20.  61.  49.]\n [114.   1.  19.  64.  46.]\n [135.   1.  20.  73.   5.]\n [139.   1.  19.  74.  10.]\n [163.   1.  19.  81.   5.]]\n","output_type":"stream"}],"execution_count":42},{"id":"8b600d9b-9e8b-4c33-bc02-109e81dc7e96","cell_type":"code","source":"#2nd task\n#2. Create a new array from Mall_Customers_Int.csv that has the value 1 if 2nd column = 1 and 3rd column < 21. Otherwise, it has the value 0.\n\n\ntestdata = np.genfromtxt('/kaggle/input/d/familgulmammadov/npdatasets/Mall_Customers_Int.csv',\n                         delimiter=',',\n                         skip_header=1)\ntestdata = testdata[~np.isnan(testdata).any(axis=1)]\narray = np.where((testdata[:, 1] == 1) & (testdata[:, 2] < 21), 1, 0)\n\nprint(array)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2025-09-09T22:07:12.761818Z","iopub.execute_input":"2025-09-09T22:07:12.762173Z","iopub.status.idle":"2025-09-09T22:07:12.773747Z","shell.execute_reply.started":"2025-09-09T22:07:12.762146Z","shell.execute_reply":"2025-09-09T22:07:12.772598Z"}},"outputs":[{"name":"stdout","text":"[1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0\n 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n 0 0 0 0 0 0 0]\n","output_type":"stream"}],"execution_count":49},{"id":"95c7b34d-eaa8-48a1-b082-9779b12ec1a2","cell_type":"markdown","source":"# **Random numbers**","metadata":{}},{"id":"1235a956-68c3-4f00-bfdb-021900c1f8b5","cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}